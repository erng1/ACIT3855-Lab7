version: '3.3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
    volumes:
    - /home/eric/ACIT3855-Lab7/zookeeper/data:/opt/zookeeper-3.4.13/data
  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka-acit3855-lab6a.eastus2.cloudapp.azure.com # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka-acit3855-lab6a.eastus2.cloudapp.azure.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/eric/ACIT3855-Lab7/kafka:/kafka/kafka-logs
    depends_on:
      - "zookeeper"
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'events'
      # So you don't have to use root, but you can if you like
      # MYSQL_USER: 'root'
      # You can use whatever password you like
      # MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
    # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql
  receiver:
    image: receiver:latest
    ports:
<<<<<<< Updated upstream
      - "8080:8080"
=======
      - "8080"
    networks:
      - "api.network"
>>>>>>> Stashed changes
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/eric/ACIT3855-Lab7/config/receiver:/config
      - /home/eric/ACIT3855-Lab7/logs:/logs
    depends_on:
      - "kafka"
  storage:
    image: storage:latest
    ports:
<<<<<<< Updated upstream
      - "8090:8090"
=======
      - "8090"    
    networks:
      - "api.network"
>>>>>>> Stashed changes
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/eric/ACIT3855-Lab7/config/storage:/config
      - /home/eric/ACIT3855-Lab7/logs:/logs
    depends_on:
      - "kafka"
      - "db"
  processing:
    image: processing:latest
<<<<<<< Updated upstream
    network_mode: "host"
=======
    ports:
      - "8100"
    networks:
      - "api.network"
>>>>>>> Stashed changes
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/eric/ACIT3855-Lab7/config/processing:/config
      - /home/eric/ACIT3855-Lab7/logs:/logs
      - processing-db:/data
    depends_on:
      - "storage"
  audit_log:
    image: audit_log:latest
    ports:
<<<<<<< Updated upstream
      - "8110:8110"
=======
      - "8110"
    networks:
      - "api.network"
>>>>>>> Stashed changes
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/eric/ACIT3855-Lab7/config/audit_log:/config
      - /home/eric/ACIT3855-Lab7/logs:/logs
    depends_on:
      - "kafka"
  dashboard:
    image: dashboard:latest
    ports:
<<<<<<< Updated upstream
      - "3000:3000"
    depends_on:
      - "processing"
      - "audit_log"
=======
      - "3000"
    networks:
      - "api.network"
    depends_on:
      - "processing"
      - "audit_log"
  nginx:
    image: nginx:latest
    # Connects the conf file of the container to the conf file in our folder
    volumes:
      - /home/eric/ACIT3855-Lab7/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    # It will start up the nginx only when all api containers have started
    depends_on:
      - "receiver"
      - "storage"
      - "processing"
      - "audit_log"
      - "dashboard"
    # Connects the port 80 of the nginx container to localhost:80 or localhost
    ports:
      - "80:80"
    networks:
      - "api.network"
>>>>>>> Stashed changes
# Names our volume
volumes:
  my-db:
  processing-db:
<<<<<<< Updated upstream
=======

networks:
  api.network:
>>>>>>> Stashed changes
